{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#imports\n",
    "import pandas as pd\n",
    " \n",
    "from sklearn.cross_validation import train_test_split\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import sklearn.preprocessing as preprocessing\n",
    "\n",
    "from sklearn.feature_selection import SelectKBest\n",
    "\n",
    "from sklearn.feature_selection import chi2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>property_id</th>\n",
       "      <th>property_name</th>\n",
       "      <th>city</th>\n",
       "      <th>tier_city</th>\n",
       "      <th>hotel_star_rating</th>\n",
       "      <th>min_price</th>\n",
       "      <th>max_price</th>\n",
       "      <th>avg_price</th>\n",
       "      <th>rating_location</th>\n",
       "      <th>rating_hospitality</th>\n",
       "      <th>rating_facilities</th>\n",
       "      <th>rating_cleanliness</th>\n",
       "      <th>rating_value_for_money</th>\n",
       "      <th>rating_food</th>\n",
       "      <th>overall_review_count</th>\n",
       "      <th>overall_review_score</th>\n",
       "      <th>site_review_count</th>\n",
       "      <th>site_review_rating</th>\n",
       "      <th>value_segment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ZRX00001</td>\n",
       "      <td>HOTEL TEMPLE CITI</td>\n",
       "      <td>Bhavnagar</td>\n",
       "      <td>B2</td>\n",
       "      <td>3</td>\n",
       "      <td>1826</td>\n",
       "      <td>2323</td>\n",
       "      <td>2074.5</td>\n",
       "      <td>2.2</td>\n",
       "      <td>2.1</td>\n",
       "      <td>4.9</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1254</td>\n",
       "      <td>3.00</td>\n",
       "      <td>304</td>\n",
       "      <td>3.2</td>\n",
       "      <td>Value</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ZRX00004</td>\n",
       "      <td>Sun N  Sand  Apartment</td>\n",
       "      <td>Mysore</td>\n",
       "      <td>B2</td>\n",
       "      <td>1</td>\n",
       "      <td>979</td>\n",
       "      <td>1038</td>\n",
       "      <td>1008.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.7</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1414</td>\n",
       "      <td>2.42</td>\n",
       "      <td>167</td>\n",
       "      <td>4.8</td>\n",
       "      <td>Value</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ZRX00005</td>\n",
       "      <td>Manek The Ocean View</td>\n",
       "      <td>Chandigarh</td>\n",
       "      <td>B2</td>\n",
       "      <td>3</td>\n",
       "      <td>1884</td>\n",
       "      <td>2078</td>\n",
       "      <td>1981.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>3.1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.7</td>\n",
       "      <td>4.5</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1704</td>\n",
       "      <td>3.04</td>\n",
       "      <td>507</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Standard</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ZRX00006</td>\n",
       "      <td>Kanchan Recreation</td>\n",
       "      <td>Srinagar</td>\n",
       "      <td>B2</td>\n",
       "      <td>3</td>\n",
       "      <td>1801</td>\n",
       "      <td>2088</td>\n",
       "      <td>1944.5</td>\n",
       "      <td>4.3</td>\n",
       "      <td>2.1</td>\n",
       "      <td>2.6</td>\n",
       "      <td>3.2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1031</td>\n",
       "      <td>2.97</td>\n",
       "      <td>4</td>\n",
       "      <td>4.8</td>\n",
       "      <td>Standard</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ZRX00007</td>\n",
       "      <td>Urban Hermitage</td>\n",
       "      <td>Hajipur</td>\n",
       "      <td>B2</td>\n",
       "      <td>3</td>\n",
       "      <td>1744</td>\n",
       "      <td>2267</td>\n",
       "      <td>2005.5</td>\n",
       "      <td>4.1</td>\n",
       "      <td>3.2</td>\n",
       "      <td>3.5</td>\n",
       "      <td>4.4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1533</td>\n",
       "      <td>3.08</td>\n",
       "      <td>527</td>\n",
       "      <td>3.5</td>\n",
       "      <td>Value</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  property_id           property_name        city tier_city  \\\n",
       "0    ZRX00001       HOTEL TEMPLE CITI   Bhavnagar        B2   \n",
       "1    ZRX00004  Sun N  Sand  Apartment      Mysore        B2   \n",
       "2    ZRX00005    Manek The Ocean View  Chandigarh        B2   \n",
       "3    ZRX00006      Kanchan Recreation    Srinagar        B2   \n",
       "4    ZRX00007         Urban Hermitage     Hajipur        B2   \n",
       "\n",
       "   hotel_star_rating  min_price  max_price  avg_price  rating_location  \\\n",
       "0                  3       1826       2323     2074.5              2.2   \n",
       "1                  1        979       1038     1008.5              3.0   \n",
       "2                  3       1884       2078     1981.0              1.9   \n",
       "3                  3       1801       2088     1944.5              4.3   \n",
       "4                  3       1744       2267     2005.5              4.1   \n",
       "\n",
       "   rating_hospitality  rating_facilities  rating_cleanliness  \\\n",
       "0                 2.1                4.9                 5.0   \n",
       "1                 2.4                2.0                 3.4   \n",
       "2                 3.1                5.0                 2.7   \n",
       "3                 2.1                2.6                 3.2   \n",
       "4                 3.2                3.5                 4.4   \n",
       "\n",
       "   rating_value_for_money  rating_food  overall_review_count  \\\n",
       "0                     1.6          1.4                  1254   \n",
       "1                     1.7          4.9                  1414   \n",
       "2                     4.5          3.1                  1704   \n",
       "3                     4.9          4.9                  1031   \n",
       "4                     4.0          2.9                  1533   \n",
       "\n",
       "   overall_review_score  site_review_count  site_review_rating value_segment  \n",
       "0                  3.00                304                 3.2         Value  \n",
       "1                  2.42                167                 4.8         Value  \n",
       "2                  3.04                507                 2.3      Standard  \n",
       "3                  2.97                  4                 4.8      Standard  \n",
       "4                  3.08                527                 3.5         Value  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"E:/TrainData.csv\") \n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "property_id               False\n",
       "property_name             False\n",
       "city                      False\n",
       "tier_city                 False\n",
       "hotel_star_rating         False\n",
       "min_price                 False\n",
       "max_price                 False\n",
       "avg_price                 False\n",
       "rating_location           False\n",
       "rating_hospitality        False\n",
       "rating_facilities         False\n",
       "rating_cleanliness        False\n",
       "rating_value_for_money    False\n",
       "rating_food               False\n",
       "overall_review_count      False\n",
       "overall_review_score      False\n",
       "site_review_count         False\n",
       "site_review_rating        False\n",
       "value_segment             False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.isnull(data).any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data_feature = data.iloc[:,2:] #removing frist two columns\n",
    "\n",
    "data_feature = data_feature.iloc[:,:-1] #removing target column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(14991,)\n"
     ]
    }
   ],
   "source": [
    "data_target = data.iloc[: ,-1] #target data\n",
    "\n",
    "data_target = data_target.values #transforming dataframe into array\n",
    "\n",
    "print(data_target.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "labelencoding started\n",
      "labelencoding completed successfully\n"
     ]
    }
   ],
   "source": [
    "def labelencoder(feature = []):\n",
    "    labelencoder = preprocessing.LabelEncoder()\n",
    "    print('labelencoding started')\n",
    "    for i in feature:\n",
    "        data_feature[i] = labelencoder.fit_transform(data_feature[i].astype('str'))\n",
    "    print('labelencoding completed successfully')   \n",
    "    \n",
    "labelencoder(['city','tier_city'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14991, 15)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best = SelectKBest(chi2, k=15)\n",
    "\n",
    "X_new = best.fit_transform(data_feature, data_target)\n",
    "\n",
    "X_new.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of each feature after Standardization :\n",
      "\n",
      "\n",
      "[  1.99071409e-17  -2.18030591e-17   0.00000000e+00   0.00000000e+00\n",
      "  -3.03346909e-17   0.00000000e+00  -1.61153045e-17  -3.69704045e-17\n",
      "   2.46469363e-17   1.61153045e-17  -2.41729568e-17  -2.74908136e-17\n",
      "  -3.41265272e-17  -8.76862158e-18   2.36989772e-17]\n",
      "\n",
      "Std. of each feature after Standardization :\n",
      "\n",
      "\n",
      "[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n"
     ]
    }
   ],
   "source": [
    "standardizer = preprocessing.StandardScaler() #standardizer\n",
    "standardizer = standardizer.fit(X_new) #standardizer\n",
    "X_new = standardizer.transform(X_new) #standardizer\n",
    "\n",
    "print('Mean of each feature after Standardization :\\n\\n')\n",
    "print(X_new.mean(axis=0))\n",
    "print('\\nStd. of each feature after Standardization :\\n\\n')\n",
    "print(X_new.std(axis=0))\n",
    "\n",
    "#test train split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_new, data_target, random_state=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of model on test set: 0.74\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda3\\lib\\site-packages\\sklearn\\neural_network\\multilayer_perceptron.py:564: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  % self.max_iter, ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPClassifier\n",
    "\n",
    "model = MLPClassifier()\n",
    "\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "print('Accuracy of model on test set: {:.2f}'.format(model.score(X_test, y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#process of predicting the value for given test data\n",
    "\n",
    "#Train data\n",
    "\n",
    "data_final = pd.read_csv(\"E:/TestData.csv\") \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.isnull(data_final).any()\n",
    "\n",
    "data_final_feature = data_final.iloc[:,2:] #removing frist two columns\n",
    "\n",
    "data_final_feature = data_final_feature.iloc[:,:-1] #removing target column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "labelencoding started\n",
      "labelencoding completed successfully\n"
     ]
    }
   ],
   "source": [
    "def labelencoder(feature = []):\n",
    "    labelencoder = preprocessing.LabelEncoder()\n",
    "    print('labelencoding started')\n",
    "    for i in feature:\n",
    "        data_final_feature[i] = labelencoder.fit_transform(data_final_feature[i].astype('str'))\n",
    "    print('labelencoding completed successfully') \n",
    "    \n",
    "labelencoder(['city','tier_city'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of each feature after Standardization :\n",
      "\n",
      "\n",
      "[  9.52508269e-17  -6.75285713e-17   0.00000000e+00  -5.68661653e-17\n",
      "  -1.13732331e-16  -7.96126315e-17  -1.27948872e-17   3.76738345e-16\n",
      "  -3.30534586e-17   3.44040300e-16   2.27464661e-17  -2.77222556e-16\n",
      "   4.12279699e-17  -4.04460601e-16   1.39322105e-16]\n",
      "\n",
      "Std. of each feature after Standardization :\n",
      "\n",
      "\n",
      "[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n"
     ]
    }
   ],
   "source": [
    "x_new_final = best.transform(data_final_feature)\n",
    "\n",
    "standardizer = preprocessing.StandardScaler() #standardizer\n",
    "standardizer = standardizer.fit(x_new_final) #standardizer\n",
    "x_new_final = standardizer.transform(x_new_final) #standardizer\n",
    "\n",
    "print('Mean of each feature after Standardization :\\n\\n')\n",
    "print(x_new_final.mean(axis=0))\n",
    "print('\\nStd. of each feature after Standardization :\\n\\n')\n",
    "print(x_new_final.std(axis=0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Standard' 'Value' 'Value Plus' ..., 'Normal' 'Standard' 'Standard']\n"
     ]
    }
   ],
   "source": [
    "pred = model.predict(x_new_final)\n",
    "\n",
    "df = pd.DataFrame(pred)\n",
    "\n",
    "df.to_csv(\"E:/final_submission_new.csv\")\n",
    "\n",
    "print(pred)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
